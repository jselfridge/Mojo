
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
// radio_tb.v
// Test bench for the ‘radio’ module.
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//

module radio_tb ();

  // Testbench inputs
  reg clk_1M, rst, radio;

  // Testbench outputs
  wire [9:0] cmd;

  // Radio module
  radio DUT
    (
    .clk_1M(clk_1M),
    .rst(rst),
    .radio(radio),
    .cmd(cmd)
    );

  // Initial toggle, then clock forever
  initial begin

    clk_1M = 1'b0;
    rst = 1'b1;
    repeat(100) #1 clk = ~clk;
    rst = 1'b0;
    forever #1 clk = ~clk;

  end

  // Assign test stimulus at certain points
  initial begin

    radio = 1’b0;                               // Initial radio value
    @(negedge rst);                             // Wait for reset

    radio = 1’b1;                               // Radio goes high
    repeat(988+0) @(posedge clk_1M);            // Command of 0 with offset
    radio = 1’b0;                               // Radio goes low
    repeat(2500-988-0) @(posedge clk_1M);       // Count out remaining period

    radio = 1’b1;                               // Radio goes high
    repeat(988+100) @(posedge clk_1M);          // Command of 100 with offset
    radio = 1’b0;                               // Radio goes low
    repeat(2500-988-100) @(posedge clk_1M);     // Count out remaining period

    radio = 1’b1;                               // Radio goes high
    repeat(988+1000) @(posedge clk_1M);         // Command of 1000 with offset
    radio = 1’b0;                               // Radio goes low
    repeat(2500-988-1000) @(posedge clk_1M);    // Count out remaining period

    radio = 1’b1;                               // Radio goes high
    repeat(988+1023) @(posedge clk_1M);         // Command of 1023 with offset
    radio = 1’b0;                               // Radio goes low
    repeat(2500-988-1023) @(posedge clk_1M);    // Count out remaining period
    $finish;                                    // exit test bench

  end

endmodule



